syntax = "proto3";

package stats;

option java_package = "com.fluentbuild.apollo.measurement";
option java_outer_classname = "UnixProcessStatsProto";

/**
 *
 * /proc/[pid]/stat
 *
 *
 * Status information about the process.  This is used by ps(1). It is defined in the kernel
 * source file fs/proc/array.c.
 *
 *
 * The fields, in order, with their proper scanf(3) format specifiers, are:
 *
 *
 *  1. pid  %d The process ID.
 *  1. comm  %s The filename of the executable, in parentheses. This is visible whether or not
 * the executable is swapped out.
 *  1. state  %c One of the following characters, indicating process state:
 *
 *  * R  Running
 *  * S  Sleeping in an interruptible wait
 *  * D  Waiting in uninterruptible disk sleep
 *  * Z  Zombie
 *  * T  Stopped (on a signal) or (before Linux 2.6.33) trace stopped
 *  * t  Tracing stop (Linux 2.6.33 onward)
 *  * W  Paging (only before Linux 2.6.0)
 *  * X  Dead (from Linux 2.6.0 onward)
 *  * x  Dead (Linux 2.6.33 to 3.13 only)
 *  * K  Wakekill (Linux 2.6.33 to 3.13 only)
 *  * W  Waking (Linux 2.6.33 to 3.13 only)
 *  * P  Parked (Linux 3.9 to 3.13 only)
 *
 *
 *  1. ppid %d The PID of the parent of this process.
 *  1. pgrp %d The process group ID of the process.
 *  1. session %d The session ID of the process.
 *  1. tty_nr %d The controlling terminal of the process.  (The minor device number is contained
 * in the combination of bits 31 to 20 and 7 to 0; the major device number is in bits 15 to 8.)
 *
 *  1. tpgid %d The ID of the foreground process group of the controlling terminal of the
 * process.
 *  1. flags %u The kernel flags word of the process.  For bit meanings, see the PF_* defines in
 * the Linux kernel source file include/linux/sched.h.  Details depend on the kernel version.
 * The format for this field was %lu before Linux 2.6.
 *  1. minflt %lu The number of minor faults the process has made which have not required
 * loading a memory page from disk.
 *  1. cminflt %lu The number of minor faults that the process's waited-for children have
 * made
 *  1. majflt  %lu The number of major faults the process has made which have required loading a
 * memory page from disk.
 *  1. cmajflt  %lu The number of major faults that the process's waited-for children have
 * made
 *  1. utime  %lu Amount of time that this process has been scheduled in user mode, measured in
 * clock ticks (divide by sysconf(_SC_CLK_TCK)).  This includes guest time,   guest_time (time
 * spent running a virtual CPU, see below), so that applications that are not aware of the guest
 * time field do not lose that time from their calculations.
 *  1. stime  %lu Amount of time that this process has been scheduled in kernel mode, measured
 * in clock ticks (divide by sysconf(_SC_CLK_TCK)).
 *  1. cutime  %ld Amount of time that this process's waited-for children have been scheduled in
 * user mode, measured in clock ticks (divide by sysconf(_SC_CLK_TCK)). (See also times(2).)
 * This includes guest time, cguest_time (time spent running a virtual CPU, see below).
 *  1. cstime  %ld Amount of time that this process's waited-for children have been scheduled in
 * kernel mode, measured in clock ticks (divide by sysconf(_SC_CLK_TCK)).
 *  1. priority  %ld (Explanation for Linux 2.6) For processes running a real-time scheduling
 * policy (policy below; see sched_setscheduler(2)), this is the negated scheduling priority,
 * minus one; that is, a number in the range -2 to -100, corresponding to real-time priorities 1
 * to 99.  For processes running under a non-real-time scheduling policy, this is the raw nice
 * value (setpriority(2)) as represented in the kernel.  The kernel stores nice values as numbers
 * in the range 0 (high) to 39 (low), corresponding to the user-visible nice range of -20 to 19.
 * Before Linux 2.6, this was a scaled value based on the scheduler weighting given to this
 * process
 *  1. nice  %ld The nice value (see setpriority(2)), a value in the range 19 (low priority) to
 * -20 (high priority).
 *  1. num_threads  %ld Number of threads in this process (since Linux 2.6). Before kernel 2.6,
 * this field was hard coded to 0 as a placeholder for an earlier removed field.
 *  1. itrealvalue  %ld The time in jiffies before the next SIGALRM is sent to the process due
 * to an interval timer.  Since kernel 2.6.17, this field is no longer maintained, and is hard
 * coded as 0.
 *  1. starttime  %llu The time the process started after system boot.  In kernels before Linux
 * 2.6, this value was expressed in jiffies.  Since Linux 2.6, the value is expressed in clock
 * ticks (divide by sysconf(_SC_CLK_TCK)).
 *  1. The format for this field was %lu before Linux 2.6.  (23) vsize  %lu Virtual memory size
 * in bytes.
 *  1. rss  %ld Resident Set Size: number of pages the process has in real memory.  This is just
 * the pages which count toward text, data, or stack space.  This does not include pages which
 * have not been demand-loaded in, or which are swapped out.
 *  1. rsslim  %lu Current soft limit in bytes on the rss of the process; see the description of
 * RLIMIT_RSS in getrlimit(2).
 *  1. startcode  %lu The address above which program text can run.
 *  1. endcode  %lu The address below which program text can run.
 *  1. startstack  %lu The address of the start (i.e., bottom) of the stack.
 *  1. kstkesp  %lu The current value of ESP (stack pointer), as found in the kernel stack page
 * for the process.
 *  1. kstkeip  %lu The current EIP (instruction pointer).
 *  1. signal  %lu The bitmap of pending signals, displayed as a decimal number.  Obsolete,
 * because it does not provide information on real-time signals; use /proc/[pid]/status
 * instead
 *  1. blocked  %lu The bitmap of blocked signals, displayed as a decimal number.  Obsolete,
 * because it does not provide information on real-time signals; use /proc/[pid]/status
 * instead
 *  1. sigignore  %lu The bitmap of ignored signals, displayed as a decimal number. Obsolete,
 * because it does not provide information on real-time signals; use /proc/[pid]/status
 * instead
 *  1. sigcatch  %lu The bitmap of caught signals, displayed as a decimal number. Obsolete,
 * because it does not provide information on real-time signals; use /proc/[pid]/status
 * instead.
 *  1. wchan  %lu This is the "channel" in which the process is waiting.  It is the address of a
 * location in the kernel where the process is sleeping.  The corresponding symbolic name can be
 * found in /proc/[pid]/wchan.
 *  1. nswap  %lu Number of pages swapped (not maintained).
 *  1. cnswap  %lu Cumulative nswap for child processes (not maintained).
 *  1. exit_signal  %d  (since Linux 2.1.22) Signal to be sent to parent when we die.
 *  1. processor  %d  (since Linux 2.2.8) CPU number last executed on.
 *  1. rt_priority  %u  (since Linux 2.5.19) Real-time scheduling priority, a number in the
 * range 1 to 99 for processes scheduled under a real-time policy, or 0, for non-real-time
 * processes (see sched_setscheduler(2)).
 *  1. policy  %u  (since Linux 2.5.19) Scheduling policy (see sched_setscheduler(2)). Decode
 * using the SCHED_* constants in linux/sched.h.  The format for this field was %lu before Linux
 * 2.6.22.
 *  1. delayacct_blkio_ticks  %llu  (since Linux 2.6.18) Aggregated block I/O delays, measured
 * in clock ticks (centiseconds).
 *  1. guest_time  %lu  (since Linux 2.6.24) Guest time of the process (time spent running a
 * virtual CPU for a guest operating system), measured in clock ticks (divide by
 * sysconf(_SC_CLK_TCK)).
 *  1. cguest_time  %ld  (since Linux 2.6.24) Guest time of the process's children, measured in
 * clock ticks (divide by sysconf(_SC_CLK_TCK)).
 *  1. start_data  %lu  (since Linux 3.3) Address above which program initialized and
 * uninitialized (BSS) data are placed.
 *  1. end_data  %lu  (since Linux 3.3) Address below which program initialized and
 * uninitialized (BSS) data are placed.
 *  1. start_brk  %lu  (since Linux 3.3) Address above which program heap can be expanded with
 * brk(2).
 *  1. arg_start  %lu  (since Linux 3.5) Address above which program command-line arguments
 * (argv) are placed.
 *  1. arg_end  %lu  (since Linux 3.5) Address below program command-line arguments (argv) are
 * placed.
 *  1. env_start  %lu  (since Linux 3.5) Address above which program environment is placed.
 *  1. env_end  %lu  (since Linux 3.5) Address below which program environment is placed.
 *  1. exit_code  %d  (since Linux 3.5) The thread's exit status in the form reported by
 * waitpid(2).
 *
 */
message UnixProcessStats {

    /**
     *
     * One of the following characters, indicating process state:
     *
     *
     *  * 'R'  Running
     *  * 'S'  Sleeping in an interruptible wait
     *  * 'D'  Waiting in uninterruptible disk sleep
     *  * 'Z'  Zombie
     *  * 'T'  Stopped (on a signal) or (before Linux 2.6.33) trace stopped
     *  * 't'  Tracing stop (Linux 2.6.33 onward)
     *  * 'W'  Paging (only before Linux 2.6.0)
     *  * 'X'  Dead (from Linux 2.6.0 onward)
     *  * 'x'  Dead (Linux 2.6.33 to 3.13 only)
     *  * 'K'  Wakekill (Linux 2.6.33 to 3.13 only)
     *  * 'W'  Waking (Linux 2.6.33 to 3.13 only)
     *  * 'P'  Parked (Linux 3.9 to 3.13 only)
     *
     */
    string state = 1;

    /**
    * The number of minor faults the process has made which have not required loading a memory
    * page from disk.
    */
    int64 numMinorFaults = 2;

    /**
    * The number of minor faults that the process's waited-for children have made.
    */
    int64 numChildMinorFaults = 3;

    /**
     * The number of major faults the process has made which have required loading a memory page
     * from disk.
     */
    int64 numMajorFaults = 4;

    /**
     * The number of major faults that the process's waited-for children have made.
     */
    int64 numChildMajorFaults = 5;

    /**
    * Amount of time that this process has been scheduled in user mode, measured in clock ticks
    * (divide by sysconf(_SC_CLK_TCK)).  This includes guest time, guest_time (time spent running
    * a virtual CPU, see below), so that applications that are not aware of the guest time field
    * do not lose that time from their calculations.
    */
    int64 userTime = 6;

    /**
    * Amount of time that this process has been scheduled in kernel mode, measured in clock ticks
    * (divide by sysconf(_SC_CLK_TCK)).
    */
    int64 systemTime = 7;

    /**
    * Amount of time that this process's waited-for children have been scheduled in user mode,
    * measured in clock ticks (divide by sysconf(_SC_CLK_TCK)). (See also times(2).)  This
    * includes guest time, cguest_time (time spent running a virtual CPU, see below).
    */
    int64 childUserTime = 8;

    /**
    * Amount of time that this process's waited-for children have been scheduled in kernel mode,
    * measured in clock ticks (divide by sysconf(_SC_CLK_TCK)).
    */
    int64 childSystemTime = 9;

    /**
     * Virtual memory size in bytes.
     */
    int64 virtualMemorySize = 10;

    /**
    * Resident Set Size: number of pages the process has in real memory.  This is just the pages
    * which count toward text, data, or stack space.  This does not include pages which have not
    * been demand-loaded in, or which are swapped out.
    */
    int64 rss = 11;

    /**
    * (since Linux 2.2.8)
    * CPU number last executed on.
    */
    int32 lastCpuExecutedNumber = 12;

    /**
    * (since Linux 2.6.18)
    * Aggregated block I/O delays, measured in clock ticks (centiseconds).
    */
    int64 aggregatedBlockIoDelaysInTicks = 13;

    int32 relativeTime = 14;
}