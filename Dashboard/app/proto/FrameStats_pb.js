// source: FrameStats.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stats.FrameStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.FrameStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stats.FrameStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stats.FrameStats.displayName = 'proto.stats.FrameStats';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.FrameStats.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.FrameStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.FrameStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.FrameStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    animationduration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    commandissueduration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    drawduration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    firstdrawframe: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    inputhandlingduration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    layoutmeasureduration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    swapbuffersduration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    syncduration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    totalduration: jspb.Message.getFieldWithDefault(msg, 10, 0),
    unknowndelayduration: jspb.Message.getFieldWithDefault(msg, 11, 0),
    intendedvsynctimestamp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    vsynctimestamp: jspb.Message.getFieldWithDefault(msg, 13, 0),
    relativetime: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.FrameStats}
 */
proto.stats.FrameStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.FrameStats;
  return proto.stats.FrameStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.FrameStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.FrameStats}
 */
proto.stats.FrameStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimationduration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommandissueduration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDrawduration(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstdrawframe(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInputhandlingduration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLayoutmeasureduration(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSwapbuffersduration(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSyncduration(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalduration(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnknowndelayduration(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntendedvsynctimestamp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVsynctimestamp(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.FrameStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.FrameStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.FrameStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.FrameStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnimationduration();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCommandissueduration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDrawduration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFirstdrawframe();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getInputhandlingduration();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLayoutmeasureduration();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSwapbuffersduration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSyncduration();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTotalduration();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getUnknowndelayduration();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getIntendedvsynctimestamp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getVsynctimestamp();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getRelativetime();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * optional string activityName = 1;
 * @return {string}
 */
proto.stats.FrameStats.prototype.getActivityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setActivityname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 animationDuration = 2;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getAnimationduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setAnimationduration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 commandIssueDuration = 3;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getCommandissueduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setCommandissueduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 drawDuration = 4;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getDrawduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setDrawduration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool firstDrawFrame = 5;
 * @return {boolean}
 */
proto.stats.FrameStats.prototype.getFirstdrawframe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setFirstdrawframe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int64 inputHandlingDuration = 6;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getInputhandlingduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setInputhandlingduration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 layoutMeasureDuration = 7;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getLayoutmeasureduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setLayoutmeasureduration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 swapBuffersDuration = 8;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getSwapbuffersduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setSwapbuffersduration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 syncDuration = 9;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getSyncduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setSyncduration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 totalDuration = 10;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getTotalduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setTotalduration = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 unknownDelayDuration = 11;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getUnknowndelayduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setUnknowndelayduration = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 intendedVSyncTimestamp = 12;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getIntendedvsynctimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setIntendedvsynctimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 vSyncTimestamp = 13;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getVsynctimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setVsynctimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 relativeTime = 14;
 * @return {number}
 */
proto.stats.FrameStats.prototype.getRelativetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.FrameStats} returns this
 */
proto.stats.FrameStats.prototype.setRelativetime = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


goog.object.extend(exports, proto.stats);
