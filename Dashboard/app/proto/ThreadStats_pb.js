// source: ThreadStats.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stats.ThreadStats', null, global);
goog.exportSymbol('proto.stats.ThreadStats.State', null, global);
goog.exportSymbol('proto.stats.ThreadStats.ThreadInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.ThreadStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stats.ThreadStats.repeatedFields_, null);
};
goog.inherits(proto.stats.ThreadStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stats.ThreadStats.displayName = 'proto.stats.ThreadStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.ThreadStats.ThreadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stats.ThreadStats.ThreadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stats.ThreadStats.ThreadInfo.displayName = 'proto.stats.ThreadStats.ThreadInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stats.ThreadStats.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.ThreadStats.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.ThreadStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.ThreadStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.ThreadStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadsinfoList: jspb.Message.toObjectList(msg.getThreadsinfoList(),
    proto.stats.ThreadStats.ThreadInfo.toObject, includeInstance),
    relativetime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.ThreadStats}
 */
proto.stats.ThreadStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.ThreadStats;
  return proto.stats.ThreadStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.ThreadStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.ThreadStats}
 */
proto.stats.ThreadStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.stats.ThreadStats.ThreadInfo;
      reader.readMessage(value,proto.stats.ThreadStats.ThreadInfo.deserializeBinaryFromReader);
      msg.addThreadsinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.ThreadStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.ThreadStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.ThreadStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.ThreadStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadsinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.stats.ThreadStats.ThreadInfo.serializeBinaryToWriter
    );
  }
  f = message.getRelativetime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.stats.ThreadStats.State = {
  NEW: 0,
  RUNNABLE: 1,
  BLOCKED: 2,
  WAITING: 3,
  TIMED_WAITING: 4,
  TERMINATED: 5
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.ThreadStats.ThreadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.ThreadStats.ThreadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.ThreadStats.ThreadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isinterrupted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    isalive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isdaemon: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.ThreadStats.ThreadInfo}
 */
proto.stats.ThreadStats.ThreadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.ThreadStats.ThreadInfo;
  return proto.stats.ThreadStats.ThreadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.ThreadStats.ThreadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.ThreadStats.ThreadInfo}
 */
proto.stats.ThreadStats.ThreadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsinterrupted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsalive(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdaemon(value);
      break;
    case 7:
      var value = /** @type {!proto.stats.ThreadStats.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.ThreadStats.ThreadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.ThreadStats.ThreadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.ThreadStats.ThreadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsinterrupted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsalive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsdaemon();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 priority = 3;
 * @return {number}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isInterrupted = 4;
 * @return {boolean}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getIsinterrupted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setIsinterrupted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool isAlive = 5;
 * @return {boolean}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getIsalive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setIsalive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool isDaemon = 6;
 * @return {boolean}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getIsdaemon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setIsdaemon = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional State state = 7;
 * @return {!proto.stats.ThreadStats.State}
 */
proto.stats.ThreadStats.ThreadInfo.prototype.getState = function() {
  return /** @type {!proto.stats.ThreadStats.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.stats.ThreadStats.State} value
 * @return {!proto.stats.ThreadStats.ThreadInfo} returns this
 */
proto.stats.ThreadStats.ThreadInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated ThreadInfo threadsInfo = 2;
 * @return {!Array<!proto.stats.ThreadStats.ThreadInfo>}
 */
proto.stats.ThreadStats.prototype.getThreadsinfoList = function() {
  return /** @type{!Array<!proto.stats.ThreadStats.ThreadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stats.ThreadStats.ThreadInfo, 2));
};


/**
 * @param {!Array<!proto.stats.ThreadStats.ThreadInfo>} value
 * @return {!proto.stats.ThreadStats} returns this
*/
proto.stats.ThreadStats.prototype.setThreadsinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.stats.ThreadStats.ThreadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stats.ThreadStats.ThreadInfo}
 */
proto.stats.ThreadStats.prototype.addThreadsinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stats.ThreadStats.ThreadInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stats.ThreadStats} returns this
 */
proto.stats.ThreadStats.prototype.clearThreadsinfoList = function() {
  return this.setThreadsinfoList([]);
};


/**
 * optional int32 relativeTime = 3;
 * @return {number}
 */
proto.stats.ThreadStats.prototype.getRelativetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.ThreadStats} returns this
 */
proto.stats.ThreadStats.prototype.setRelativetime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.stats);
