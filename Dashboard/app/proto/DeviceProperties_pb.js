// source: DeviceProperties.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var OsProperties_pb = require('./OsProperties_pb.js');
goog.object.extend(proto, OsProperties_pb);
var HardwareProperties_pb = require('./HardwareProperties_pb.js');
goog.object.extend(proto, HardwareProperties_pb);
var DeviceState_pb = require('./DeviceState_pb.js');
goog.object.extend(proto, DeviceState_pb);
goog.exportSymbol('proto.device.DeviceProperties', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.DeviceProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.DeviceProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.DeviceProperties.displayName = 'proto.device.DeviceProperties';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.DeviceProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.device.DeviceProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.DeviceProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.DeviceProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    hardwareproperties: (f = msg.getHardwareproperties()) && HardwareProperties_pb.HardwareProperties.toObject(includeInstance, f),
    osproperties: (f = msg.getOsproperties()) && OsProperties_pb.OsProperties.toObject(includeInstance, f),
    availablefeaturesMap: (f = msg.getAvailablefeaturesMap()) ? f.toObject(includeInstance, undefined) : [],
    opengleversion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentstate: (f = msg.getCurrentstate()) && DeviceState_pb.DeviceState.toObject(includeInstance, f),
    devicekey: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.DeviceProperties}
 */
proto.device.DeviceProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.DeviceProperties;
  return proto.device.DeviceProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.DeviceProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.DeviceProperties}
 */
proto.device.DeviceProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new HardwareProperties_pb.HardwareProperties;
      reader.readMessage(value,HardwareProperties_pb.HardwareProperties.deserializeBinaryFromReader);
      msg.setHardwareproperties(value);
      break;
    case 2:
      var value = new OsProperties_pb.OsProperties;
      reader.readMessage(value,OsProperties_pb.OsProperties.deserializeBinaryFromReader);
      msg.setOsproperties(value);
      break;
    case 3:
      var value = msg.getAvailablefeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpengleversion(value);
      break;
    case 5:
      var value = new DeviceState_pb.DeviceState;
      reader.readMessage(value,DeviceState_pb.DeviceState.deserializeBinaryFromReader);
      msg.setCurrentstate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.DeviceProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.DeviceProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.DeviceProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.DeviceProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHardwareproperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      HardwareProperties_pb.HardwareProperties.serializeBinaryToWriter
    );
  }
  f = message.getOsproperties();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      OsProperties_pb.OsProperties.serializeBinaryToWriter
    );
  }
  f = message.getAvailablefeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getOpengleversion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCurrentstate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      DeviceState_pb.DeviceState.serializeBinaryToWriter
    );
  }
  f = message.getDevicekey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional HardwareProperties hardwareProperties = 1;
 * @return {?proto.device.HardwareProperties}
 */
proto.device.DeviceProperties.prototype.getHardwareproperties = function() {
  return /** @type{?proto.device.HardwareProperties} */ (
    jspb.Message.getWrapperField(this, HardwareProperties_pb.HardwareProperties, 1));
};


/**
 * @param {?proto.device.HardwareProperties|undefined} value
 * @return {!proto.device.DeviceProperties} returns this
*/
proto.device.DeviceProperties.prototype.setHardwareproperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.clearHardwareproperties = function() {
  return this.setHardwareproperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceProperties.prototype.hasHardwareproperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OsProperties osProperties = 2;
 * @return {?proto.device.OsProperties}
 */
proto.device.DeviceProperties.prototype.getOsproperties = function() {
  return /** @type{?proto.device.OsProperties} */ (
    jspb.Message.getWrapperField(this, OsProperties_pb.OsProperties, 2));
};


/**
 * @param {?proto.device.OsProperties|undefined} value
 * @return {!proto.device.DeviceProperties} returns this
*/
proto.device.DeviceProperties.prototype.setOsproperties = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.clearOsproperties = function() {
  return this.setOsproperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceProperties.prototype.hasOsproperties = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, int32> availableFeatures = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.device.DeviceProperties.prototype.getAvailablefeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.clearAvailablefeaturesMap = function() {
  this.getAvailablefeaturesMap().clear();
  return this;};


/**
 * optional int32 openGleVersion = 4;
 * @return {number}
 */
proto.device.DeviceProperties.prototype.getOpengleversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.setOpengleversion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DeviceState currentState = 5;
 * @return {?proto.device.DeviceState}
 */
proto.device.DeviceProperties.prototype.getCurrentstate = function() {
  return /** @type{?proto.device.DeviceState} */ (
    jspb.Message.getWrapperField(this, DeviceState_pb.DeviceState, 5));
};


/**
 * @param {?proto.device.DeviceState|undefined} value
 * @return {!proto.device.DeviceProperties} returns this
*/
proto.device.DeviceProperties.prototype.setCurrentstate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.clearCurrentstate = function() {
  return this.setCurrentstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceProperties.prototype.hasCurrentstate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string deviceKey = 6;
 * @return {string}
 */
proto.device.DeviceProperties.prototype.getDevicekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.DeviceProperties} returns this
 */
proto.device.DeviceProperties.prototype.setDevicekey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.device);
