// source: MemoryStats.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stats.MemoryStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.MemoryStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stats.MemoryStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stats.MemoryStats.displayName = 'proto.stats.MemoryStats';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.MemoryStats.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.MemoryStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.MemoryStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.MemoryStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    appdalvikpss: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appdalvikprivatedirty: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appdalvikshareddirty: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appnativepss: jspb.Message.getFieldWithDefault(msg, 4, 0),
    appnativeprivatedirty: jspb.Message.getFieldWithDefault(msg, 5, 0),
    appnativeshareddirty: jspb.Message.getFieldWithDefault(msg, 6, 0),
    appotherpss: jspb.Message.getFieldWithDefault(msg, 7, 0),
    appotherprivatedirty: jspb.Message.getFieldWithDefault(msg, 8, 0),
    appothershareddirty: jspb.Message.getFieldWithDefault(msg, 9, 0),
    systemtotalsizebytes: jspb.Message.getFieldWithDefault(msg, 10, 0),
    systemavailablesizebytes: jspb.Message.getFieldWithDefault(msg, 11, 0),
    systemthresholdsizebytes: jspb.Message.getFieldWithDefault(msg, 12, 0),
    relativetime: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.MemoryStats}
 */
proto.stats.MemoryStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.MemoryStats;
  return proto.stats.MemoryStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.MemoryStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.MemoryStats}
 */
proto.stats.MemoryStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppdalvikpss(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppdalvikprivatedirty(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppdalvikshareddirty(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppnativepss(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppnativeprivatedirty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppnativeshareddirty(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppotherpss(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppotherprivatedirty(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppothershareddirty(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemtotalsizebytes(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemavailablesizebytes(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemthresholdsizebytes(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.MemoryStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.MemoryStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.MemoryStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.MemoryStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppdalvikpss();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAppdalvikprivatedirty();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAppdalvikshareddirty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAppnativepss();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAppnativeprivatedirty();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAppnativeshareddirty();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAppotherpss();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAppotherprivatedirty();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getAppothershareddirty();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getSystemtotalsizebytes();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getSystemavailablesizebytes();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getSystemthresholdsizebytes();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRelativetime();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 appDalvikPss = 1;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppdalvikpss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppdalvikpss = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 appDalvikPrivateDirty = 2;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppdalvikprivatedirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppdalvikprivatedirty = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 appDalvikSharedDirty = 3;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppdalvikshareddirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppdalvikshareddirty = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 appNativePss = 4;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppnativepss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppnativepss = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 appNativePrivateDirty = 5;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppnativeprivatedirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppnativeprivatedirty = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 appNativeSharedDirty = 6;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppnativeshareddirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppnativeshareddirty = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 appOtherPss = 7;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppotherpss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppotherpss = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 appOtherPrivateDirty = 8;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppotherprivatedirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppotherprivatedirty = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 appOtherSharedDirty = 9;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getAppothershareddirty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setAppothershareddirty = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 systemTotalSizeBytes = 10;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getSystemtotalsizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setSystemtotalsizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 systemAvailableSizeBytes = 11;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getSystemavailablesizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setSystemavailablesizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 systemThresholdSizeBytes = 12;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getSystemthresholdsizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setSystemthresholdsizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 relativeTime = 13;
 * @return {number}
 */
proto.stats.MemoryStats.prototype.getRelativetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.stats.MemoryStats} returns this
 */
proto.stats.MemoryStats.prototype.setRelativetime = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


goog.object.extend(exports, proto.stats);
