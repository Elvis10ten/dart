// source: DeviceState.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var StorageStats_pb = require('./StorageStats_pb.js');
goog.object.extend(proto, StorageStats_pb);
var BatteryStats_pb = require('./BatteryStats_pb.js');
goog.object.extend(proto, BatteryStats_pb);
goog.exportSymbol('proto.device.DeviceState', null, global);
goog.exportSymbol('proto.device.RamInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.DeviceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.DeviceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.DeviceState.displayName = 'proto.device.DeviceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.RamInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.RamInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.RamInfo.displayName = 'proto.device.RamInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.DeviceState.prototype.toObject = function(opt_includeInstance) {
  return proto.device.DeviceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.DeviceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.DeviceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    batteryinfo: (f = msg.getBatteryinfo()) && BatteryStats_pb.BatteryStats.toObject(includeInstance, f),
    storageinfo: (f = msg.getStorageinfo()) && StorageStats_pb.StorageStats.toObject(includeInstance, f),
    raminfo: (f = msg.getRaminfo()) && proto.device.RamInfo.toObject(includeInstance, f),
    currenttimemillis: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.DeviceState}
 */
proto.device.DeviceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.DeviceState;
  return proto.device.DeviceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.DeviceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.DeviceState}
 */
proto.device.DeviceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new BatteryStats_pb.BatteryStats;
      reader.readMessage(value,BatteryStats_pb.BatteryStats.deserializeBinaryFromReader);
      msg.setBatteryinfo(value);
      break;
    case 2:
      var value = new StorageStats_pb.StorageStats;
      reader.readMessage(value,StorageStats_pb.StorageStats.deserializeBinaryFromReader);
      msg.setStorageinfo(value);
      break;
    case 3:
      var value = new proto.device.RamInfo;
      reader.readMessage(value,proto.device.RamInfo.deserializeBinaryFromReader);
      msg.setRaminfo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrenttimemillis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.DeviceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.DeviceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.DeviceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.DeviceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatteryinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      BatteryStats_pb.BatteryStats.serializeBinaryToWriter
    );
  }
  f = message.getStorageinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      StorageStats_pb.StorageStats.serializeBinaryToWriter
    );
  }
  f = message.getRaminfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.device.RamInfo.serializeBinaryToWriter
    );
  }
  f = message.getCurrenttimemillis();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional stats.BatteryStats batteryInfo = 1;
 * @return {?proto.stats.BatteryStats}
 */
proto.device.DeviceState.prototype.getBatteryinfo = function() {
  return /** @type{?proto.stats.BatteryStats} */ (
    jspb.Message.getWrapperField(this, BatteryStats_pb.BatteryStats, 1));
};


/**
 * @param {?proto.stats.BatteryStats|undefined} value
 * @return {!proto.device.DeviceState} returns this
*/
proto.device.DeviceState.prototype.setBatteryinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceState} returns this
 */
proto.device.DeviceState.prototype.clearBatteryinfo = function() {
  return this.setBatteryinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceState.prototype.hasBatteryinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional stats.StorageStats storageInfo = 2;
 * @return {?proto.stats.StorageStats}
 */
proto.device.DeviceState.prototype.getStorageinfo = function() {
  return /** @type{?proto.stats.StorageStats} */ (
    jspb.Message.getWrapperField(this, StorageStats_pb.StorageStats, 2));
};


/**
 * @param {?proto.stats.StorageStats|undefined} value
 * @return {!proto.device.DeviceState} returns this
*/
proto.device.DeviceState.prototype.setStorageinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceState} returns this
 */
proto.device.DeviceState.prototype.clearStorageinfo = function() {
  return this.setStorageinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceState.prototype.hasStorageinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RamInfo ramInfo = 3;
 * @return {?proto.device.RamInfo}
 */
proto.device.DeviceState.prototype.getRaminfo = function() {
  return /** @type{?proto.device.RamInfo} */ (
    jspb.Message.getWrapperField(this, proto.device.RamInfo, 3));
};


/**
 * @param {?proto.device.RamInfo|undefined} value
 * @return {!proto.device.DeviceState} returns this
*/
proto.device.DeviceState.prototype.setRaminfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.DeviceState} returns this
 */
proto.device.DeviceState.prototype.clearRaminfo = function() {
  return this.setRaminfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.DeviceState.prototype.hasRaminfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 currentTimeMillis = 4;
 * @return {number}
 */
proto.device.DeviceState.prototype.getCurrenttimemillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.DeviceState} returns this
 */
proto.device.DeviceState.prototype.setCurrenttimemillis = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.RamInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.device.RamInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.RamInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.RamInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemtotalsizebytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemavailablesizebytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    systemthresholdsizebytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.RamInfo}
 */
proto.device.RamInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.RamInfo;
  return proto.device.RamInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.RamInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.RamInfo}
 */
proto.device.RamInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemtotalsizebytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemavailablesizebytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemthresholdsizebytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.RamInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.RamInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.RamInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.RamInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemtotalsizebytes();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSystemavailablesizebytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSystemthresholdsizebytes();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 systemTotalSizeBytes = 1;
 * @return {number}
 */
proto.device.RamInfo.prototype.getSystemtotalsizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.RamInfo} returns this
 */
proto.device.RamInfo.prototype.setSystemtotalsizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 systemAvailableSizeBytes = 2;
 * @return {number}
 */
proto.device.RamInfo.prototype.getSystemavailablesizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.RamInfo} returns this
 */
proto.device.RamInfo.prototype.setSystemavailablesizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 systemThresholdSizeBytes = 3;
 * @return {number}
 */
proto.device.RamInfo.prototype.getSystemthresholdsizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.RamInfo} returns this
 */
proto.device.RamInfo.prototype.setSystemthresholdsizebytes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.device);
