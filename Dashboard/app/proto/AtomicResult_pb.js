// source: AtomicResult.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var AtomicTest_pb = require('./AtomicTest_pb.js');
goog.object.extend(proto, AtomicTest_pb);
var TestSummaryProfile_pb = require('./TestSummaryProfile_pb.js');
goog.object.extend(proto, TestSummaryProfile_pb);
goog.exportSymbol('proto.tests.AtomicResult', null, global);
goog.exportSymbol('proto.tests.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tests.AtomicResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tests.AtomicResult.repeatedFields_, null);
};
goog.inherits(proto.tests.AtomicResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tests.AtomicResult.displayName = 'proto.tests.AtomicResult';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tests.AtomicResult.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tests.AtomicResult.prototype.toObject = function(opt_includeInstance) {
  return proto.tests.AtomicResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tests.AtomicResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tests.AtomicResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    atomictest: (f = msg.getAtomictest()) && AtomicTest_pb.AtomicTest.toObject(includeInstance, f),
    summaryprofile: (f = msg.getSummaryprofile()) && TestSummaryProfile_pb.TestSummaryProfile.toObject(includeInstance, f),
    timestarted: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timefinished: jspb.Message.getFieldWithDefault(msg, 5, 0),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 6, ""),
    runtimelogsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    autoscreenshotnameprefix: jspb.Message.getFieldWithDefault(msg, 8, ""),
    profilefilename: jspb.Message.getFieldWithDefault(msg, 9, ""),
    logfilename: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tests.AtomicResult}
 */
proto.tests.AtomicResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tests.AtomicResult;
  return proto.tests.AtomicResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tests.AtomicResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tests.AtomicResult}
 */
proto.tests.AtomicResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new AtomicTest_pb.AtomicTest;
      reader.readMessage(value,AtomicTest_pb.AtomicTest.deserializeBinaryFromReader);
      msg.setAtomictest(value);
      break;
    case 2:
      var value = new TestSummaryProfile_pb.TestSummaryProfile;
      reader.readMessage(value,TestSummaryProfile_pb.TestSummaryProfile.deserializeBinaryFromReader);
      msg.setSummaryprofile(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestarted(value);
      break;
    case 4:
      var value = /** @type {!proto.tests.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimefinished(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addRuntimelogs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAutoscreenshotnameprefix(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfilefilename(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogfilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tests.AtomicResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tests.AtomicResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tests.AtomicResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tests.AtomicResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAtomictest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      AtomicTest_pb.AtomicTest.serializeBinaryToWriter
    );
  }
  f = message.getSummaryprofile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      TestSummaryProfile_pb.TestSummaryProfile.serializeBinaryToWriter
    );
  }
  f = message.getTimestarted();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTimefinished();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRuntimelogsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getAutoscreenshotnameprefix();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getProfilefilename();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLogfilename();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional AtomicTest atomicTest = 1;
 * @return {?proto.tests.AtomicTest}
 */
proto.tests.AtomicResult.prototype.getAtomictest = function() {
  return /** @type{?proto.tests.AtomicTest} */ (
    jspb.Message.getWrapperField(this, AtomicTest_pb.AtomicTest, 1));
};


/**
 * @param {?proto.tests.AtomicTest|undefined} value
 * @return {!proto.tests.AtomicResult} returns this
*/
proto.tests.AtomicResult.prototype.setAtomictest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.clearAtomictest = function() {
  return this.setAtomictest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tests.AtomicResult.prototype.hasAtomictest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestSummaryProfile summaryProfile = 2;
 * @return {?proto.tests.TestSummaryProfile}
 */
proto.tests.AtomicResult.prototype.getSummaryprofile = function() {
  return /** @type{?proto.tests.TestSummaryProfile} */ (
    jspb.Message.getWrapperField(this, TestSummaryProfile_pb.TestSummaryProfile, 2));
};


/**
 * @param {?proto.tests.TestSummaryProfile|undefined} value
 * @return {!proto.tests.AtomicResult} returns this
*/
proto.tests.AtomicResult.prototype.setSummaryprofile = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.clearSummaryprofile = function() {
  return this.setSummaryprofile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tests.AtomicResult.prototype.hasSummaryprofile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 timeStarted = 3;
 * @return {number}
 */
proto.tests.AtomicResult.prototype.getTimestarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setTimestarted = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Status status = 4;
 * @return {!proto.tests.Status}
 */
proto.tests.AtomicResult.prototype.getStatus = function() {
  return /** @type {!proto.tests.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tests.Status} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 timeFinished = 5;
 * @return {number}
 */
proto.tests.AtomicResult.prototype.getTimefinished = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setTimefinished = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string stackTrace = 6;
 * @return {string}
 */
proto.tests.AtomicResult.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string runtimeLogs = 7;
 * @return {!Array<string>}
 */
proto.tests.AtomicResult.prototype.getRuntimelogsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setRuntimelogsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.addRuntimelogs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.clearRuntimelogsList = function() {
  return this.setRuntimelogsList([]);
};


/**
 * optional string autoScreenShotNamePrefix = 8;
 * @return {string}
 */
proto.tests.AtomicResult.prototype.getAutoscreenshotnameprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setAutoscreenshotnameprefix = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string profileFileName = 9;
 * @return {string}
 */
proto.tests.AtomicResult.prototype.getProfilefilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setProfilefilename = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string logFileName = 10;
 * @return {string}
 */
proto.tests.AtomicResult.prototype.getLogfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.tests.AtomicResult} returns this
 */
proto.tests.AtomicResult.prototype.setLogfilename = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.tests.Status = {
  STARTED: 0,
  ERROR: 1,
  FAILURE: 2,
  PASSED: 3,
  ASSUMPTION_FAILURE: 4,
  IGNORED: 5
};

goog.object.extend(exports, proto.tests);
